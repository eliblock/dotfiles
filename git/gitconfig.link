# https://git-scm.com/docs/git-config#_configuration_file

[user]
	email = 3347571+eliblock@users.noreply.github.com
	name = Eli Block

[core]
  editor = cursor --wait
  pager = delta

[push]
	default = simple

[rebase]
  abbreviateCommands = true

[init]
	defaultBranch = main

[delta]
	features = decorations

[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw

  file-decoration-style = blue ol

  side-by-side = true
  line-numbers-left-format = "{nm:>} "
  line-numbers-right-format = "â‹®{np:>} "

  hunk-header-decoration-style = grey box
  hunk-header-line-number-style = grey
  hunk-header-style = line-number syntax

# Add the following configuration to a repo's .git/config in order to instruct
# git to fetch only the main branch and branches prefixed with "eb/".
# On projects with many contributors pushing branches to one remote, this keeps
# the local repo small.
# With this config, to check out a branch that doesn't match the filter, run:
# git fetch origin other-branch-name:other-branch-name && git checkout other-branch-name
# [remote "origin"]
#   fetch = +refs/heads/main:refs/remotes/origin/main
#   fetch = +refs/heads/eb/*:refs/remotes/origin/eb/*

## Place any git configuration which you do _not_ want tracked in shared dotfiles
## in ~/.untracked-local-gitconfig.
[include]
  path = ~/.untracked-local-gitconfig

[alias]
  br-find = "!git branch | cut -c 3- | awk '{print $1}' | fzf +m --preview 'git show --color=always {}' --preview-window=up,85%,~3"
  br = "!git checkout $(git br-find)"
  pr-message = "!git log --reverse --pretty=format:\"**%s**%n%n%b\" $(gh default-branch)..HEAD"
  resign = "!GIT_EDITOR=vim git rebase --exec 'git commit --amend --no-edit -n -S' -i $(gh default-branch)"
  delete-squashed = "!f() { \
    set -e; \
    local targetBranch=${1:-$(gh default-branch)}; \
    git checkout -q $targetBranch; \
    echo \"Removing branches which have been squash merged into $targetBranch...\"; \
    git branch --merged \
      | grep -v \"\\*\" \
      | xargs -n 1 git branch -d; \
    git for-each-ref refs/heads/ \"--format=%(refname:short)\" \
      | while read branch; do \
        mergeBase=$(git merge-base $targetBranch $branch); \
        [[ $(git cherry $targetBranch $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] \
          && git branch -D $branch; \
      done; \
    }; \
    f"
